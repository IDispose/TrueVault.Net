{"name":"TrueVault.Net","tagline":".NET wrapper for the TrueVault API","body":"TrueVault.Net\r\n=============\r\n\r\n.NET wrapper for the TrueVault API\r\n\r\n###What is TrueVault, and what is this library?\r\n\r\nTrueVault is a Secure API to store health data. See their website at https://www.truevault.com for more information.\r\n\r\nThis library is a simple, strongly-typed .NET wrapper around TrueVault's RESTful API.\r\n\r\n###Features ([x] Completed and [ ] Planned)\r\n\r\n- [x] JSON Document Store API\r\n- [ ] BLOB Store API\r\n- [ ] Search Schema API\r\n\r\n###External Dependencies\r\n\r\n> **Client Library**\r\n\r\n> - ServiceStack.Text 3.9.71\r\n> - AutoMapper 3.1.1\r\n\r\n> **Test Project**\r\n\r\n> - NBuilder 3.0.1.1\r\n> - NUnit 2.6.3\r\n\r\n#Usage\r\n\r\n##Instantiation\r\n\r\nCreate a new instance of the TrueVault client, passing in your TrueVault API key, and you're ready to go!\r\n\r\n```csharp\r\nvar trueVaultClient = new TrueVaultClient(\"{TrueVault API Key}\");\r\n```\r\n\r\n##JSON Document Store API\r\n\r\n###Creating a  Document\r\n\r\nThis library automatically handles Base64 conversion and serialization. You only need to pass an instance of Type `T` to save it to TrueVault. `T` can be any class with a parameterless constructor.\r\n\r\nA document can be created with or without the optional `schemaId` parameter. While this library (currently) does not support creating search Schemas, you can still create one yourself, then pass its ID into the appropriate overloaded `CreateDocument<T>` method.\r\n\r\n###Getting Document(s)\r\n\r\n`GetDocument<T>` is used to retrieve a single document from TrueVault, and will directly return an instance of Type `T`. Base64 conversion and deserialization is handled for you.\r\n\r\n`MultiGetDocuments<T>` retrieves a `MultiDocumentResponse`, which contains a list of `DocumentResponse` in its `Documents` property. You can use the `DeserializeDocuments<T>` method to extract and return the wrapped document instances as Type `T`.\r\n\r\nEach `DocumentResponse` exposes a `DeserializeDocument<T>` method, which extracts and returns the individual document as Type `T`. `DocumentResponse` contains the TrueVault document ID in its `Id` property, as well as the raw serialized Base64 encoded JSON string in its `Document` property.\r\n\r\n###Exception Handling\r\n\r\nWhen the library catches a `WebException`, it will make an attempt to parse and unwrap the `error` object in an error response from TrueVault. It will throw a new `WebException` with the original exception in the `InnerException` property, and a message formatted as follows, where `response` is the error response body returned by TrueVault.\r\n\r\n`TrueVault Transaction ID {response.transaction_id} - {HTTP Status Code} Error (Type: {response.error.type}) [Code: {response.error.code}]: {response.error.message}`\r\n\r\n##Running the Tests\r\n\r\nUpdate App.config in the TrueVault.Net.Test project with the values you wish to use for testing. Please note that the tests use the TrueVault API, so you may incur a small amount of usage by running them. Per the license, you agree that I cannot be held responsible for any usage charges, fees, overages, etc. you may incur by running the tests.\r\n\r\n#Contributing\r\n\r\nPull requests are welcome. If you're planning on adding a major feature, please contact me first to make sure it fits with the direction of the library, and that I'm not already working on it!\r\n\r\n#Legal\r\n\r\nThis library is made available under The MIT License. By using this library, you agree to the terms of that license.\r\n","google":"UA-35498989-4","note":"Don't delete this file! It's used internally to help with page regeneration."}